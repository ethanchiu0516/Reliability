library(fitdistrplus)
library(survival)
library(survminer)

data_1 <- data.frame(time = c(rep(1, 103), rep(2, 100), rep(3, 97)), d = c(rep(1, 4), rep(0, 99), rep(1, 5), rep(0, 95), rep(1, 2), rep(0, 95)))
#a
mle_function_a <- function(eta){
  eta = eta
  return(log(
    (pweibull(1, shape = 1, scale = eta)-pweibull(0, shape = 1, scale = eta))^4*((1-pweibull(1, 1, eta))^99)*
    (pweibull(2, 1, eta) - pweibull(1, 1, eta))^5*(1-pweibull(2, 1, eta))^95*
    (pweibull(3, 1, eta)-pweibull(2, 1, eta))^2*(1-pweibull(3, 1, eta))^95)
  )
}

optimize(mle_function_a, c(0, 1e+7), maximum = "TRUE")

#b
mle_function_b<-function(parameter){
  beta = parameter[1]
  eta = parameter[2]
  return(-log(
    ((pweibull(1, shape = beta, scale = eta)-pweibull(0, shape = beta, scale = eta))^4)*((1-pweibull(1, shape = beta, scale = eta))^99)*
    ((pweibull(2, shape = beta, scale = eta)-pweibull(1, shape = beta, scale = eta))^5)*((1-pweibull(2, shape = beta, scale = eta))^95)*
    ((pweibull(3, shape = beta, scale = eta)-pweibull(2, shape = beta, scale = eta))^2)*((1-pweibull(3, shape = beta, scale = eta))^95)
    )
  )
}

optim(c(1, 16), mle_function_b)

#c
print(optimize(mle_function_a, c(0, 1e+7), maximum = "TRUE")$objective)
print(-optim(c(1, 16), mle_function_b)$value) #multiply by -1
#observed that they have almost same value, but using information criteria is better and more fair to compare two method
#compute AIC
AIC_exp <- -2*optimize(mle_function_a, c(0, 1e+7), maximum = "TRUE")$objective+2*1
AIC_wei <- -2*(-optim(c(1, 16), mle_function_b)$value)+2*2

print(c(AIC_exp, AIC_wei))
#since exp distribution has lower AIC, we concluded that using exp to estimate is better based on AIC

#d, test whether beta = 1 by log-likelihood ratio test
test_value<--2*(optimize(mle_function_a, c(0, 1e+7), maximum = "TRUE")$objective-
  -optim(c(1, 16), mle_function_b)$value)

criteria <- qchisq(0.95, df = 1)
#result: test value < criteria, we concluded that not reject H0, which is not reject beta = 0
print(c(test_value, criteria))

#e
#plot weibull(eta_mle, beta_mle)
object<-survfit(Surv(data_1$time, data_1$d)~1, conf.int = .95, conf.type = "logit")
sum_object <- summary(object)

estimate <- 1-sum_object$surv
sd <- sum_object$std.err

plot(
  log(sum_object$time, 10), log(-log(1-estimate)),
  xlab = "", ylab = "",
  axes = FALSE,
  pch = 16, col = "black",
  xlim = c(log(1, 10), log(5, 10)),
  ylim = c(log(-log(1-0.01)), log(-log(1-.09)))
)

proportion <- c(.0005, .001, .003, .005, .01, .02, .05, .1, .2, .3, .5, .7, .8, .9, .95, .98, .999)
proportion_axis <- log(-log(1-proportion))

x_ <- c(0.5, 1, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0)
x_axis <- log(x_, 10)

axis(3)
axis(4, las = 1)
axis(2, at = proportion_axis, labels = proportion, las = 1)
axis(1, at = x_axis, labels = x_)

mtext("Standard quantile", side = 4, line = 0)
mtext("Log year", side = 3, line = 2)
mtext("Proportion failing", side = 2, line = 3)
mtext("year", side = 1, line = 2)

slope <- lsfit(log(sum_object$time, 10), log(-log(1-estimate)))$coefficients[2]*log(exp(1),10)
#fit line with beta_mle = -1.34537, eta_mle = 23.62511
abline(a = -1.34537/log(exp(1),10)*log(23.62511,10), b = 1.34537/log(exp(1),10), lwd = 3, col = "red")

#plot weibull(eta_mle, beta = 1)
abline(a = -1/log(exp(1),10)*log(53.49844,10), b = 1/log(exp(1),10), lwd = 3, col = "blue")
#observed that weibull plot both using mle will fitted better, I guessed it because beta using 1 is still a little bit different from 1.34537
box()

#2
data_2 <- data.frame(time = c(.82, .99, 1.06, 1.08, 1.24, 1.39, 1.4, rep(1.5, 13)), d = c(rep(1, 7), rep(0, 13)))
#a
#CI and estimate
object<-survfit(Surv(data_2$time, data_2$d)~1, conf.int = 0.95, conf.type = "logit")
sum_object <- summary(object)

estimate <- 1-sum_object$surv
sd <- sum_object$std.err

ci_low <- rep(0, 7)
ci_up <- rep(0, 7)

e = 3.25

for(i in 1:7){
  w = exp(e*sd[i]/(estimate[i]+(1-estimate[i])))
  ci_low[i] = (estimate[i]/(estimate[i]+(1-estimate[i])*w))
  ci_up[i] = (estimate[i]/(estimate[i]+(1-estimate[i])/w))
}

ci_wei_low <- log(-log(1-ci_low))
ci_wei_up <- log(-log(1-ci_up))

#plot
plot(
  log(sum_object$time, 10), log(-log(1-estimate)),
  xlab = "", ylab = "",
  axes = FALSE,
  pch = 16, col = "black",
  xlim = c(log(.82, 10), log(1.6, 10)),
  ylim = c(log(-log(1-0.05)), log(-log(1-.5)))
)

for(i in 1:7){
  lines(c(log(sum_object$time[i], 10), log(sum_object$time[i+1], 10)), rep(ci_wei_low[i], 2), col = "blue", lty = 2)
  lines(c(log(sum_object$time[i], 10), log(sum_object$time[i+1], 10)), rep(ci_wei_up[i], 2), col = "red", lty = 2)
}

#axis setting
proportion <- c(.0005, .001, .003, .005, .01, .02, .05, .1, .2, .3, .5, .7, .8, .9, .95, .98, .999)
proportion_axis <- log(-log(1-proportion))

x_ <- c(0.5, 0.75, 1, 1.25, 1.5, 1.75)
x_axis <- log(x_, 10)

axis(3)
axis(4, las = 1)
axis(2, at = proportion_axis, labels = proportion, las = 1)
axis(1, at = x_axis, labels = x_)

mtext("Standard quantile", side = 4, line = 0)
mtext("Log time", side = 3, line = 2)
mtext("Proportion failing", side = 2, line = 3)
mtext("time", side = 1, line = 2)

box()
#compute slope and do transformation to obtain beta
slope <- lsfit(log(sum_object$time, 10), log(-log(1-estimate)))$coefficients[2]*log(exp(1),10)
print(slope)
#observed that 3.77 is closed to 3, so we concluded that the data are consistent with the specified value of beta.

#b, slide 44
beta <- 3

#compute mle
mle_eta <- (sum(data_2$time^beta)/7)^(1/beta)

#plot

plot(
  log(sum_object$time, 10), log(-log(1-estimate)),
  xlab = "", ylab = "",
  axes = FALSE,
  pch = 16, col = "black",
  xlim = c(log(.82, 10), log(1.6, 10)),
  ylim = c(log(-log(1-0.05)), log(-log(1-.5)))
)

axis(3)
axis(4, las = 1)
axis(2, at = proportion_axis, labels = proportion, las = 1)
axis(1, at = x_axis, labels = x_)

mtext("Standard quantile", side = 4, line = 0)
mtext("Log time", side = 3, line = 2)
mtext("Proportion failing", side = 2, line = 3)
mtext("time", side = 1, line = 2)

box()

abline(a = -beta/log(exp(1),10)*log(mle_eta,10), b = beta/log(exp(1),10), lwd = 3, col = "red")



#c
#compute mle_eta's se
se_eta <- (mle_eta/beta)*sqrt(1/7)

#compute 95% CI
print(c(mle_eta-qnorm(0.975)*se_eta, mle_eta+qnorm(0.975)*se_eta))

#d
#compute F(t) by mle
F_1000 <- 1-exp(-(1/mle_eta)^beta)

#compute delta-method's derivative function
diff_function <- exp(-(1/mle_eta)^beta)*(-3)*(1/mle_eta^4)
#compute 95% CI
print(c(F_1000-qnorm(0.975)*se_eta*abs(diff_function), F_1000+qnorm(0.975)*se_eta*abs(diff_function)))

#e, redo (a) ~ (c)
#e_a

#e_b
beta_e <- 2
mle_eta_e <- (sum(data_2$time^beta_e)/7)^(1/beta_e)

#plot

plot(
  log(sum_object$time, 10), log(-log(1-estimate)),
  xlab = "", ylab = "",
  axes = FALSE,
  pch = 16, col = "black",
  xlim = c(log(.82, 10), log(1.6, 10)),
  ylim = c(log(-log(1-0.05)), log(-log(1-.5)))
)

axis(3)
axis(4, las = 1)
axis(2, at = proportion_axis, labels = proportion, las = 1)
axis(1, at = x_axis, labels = x_)

mtext("Standard quantile", side = 4, line = 0)
mtext("Log time", side = 3, line = 2)
mtext("Proportion failing", side = 2, line = 3)
mtext("time", side = 1, line = 2)

box()

abline(a = -beta/log(exp(1),10)*log(mle_eta,10), b = beta/log(exp(1),10), lwd = 3, col = "red")

abline(a = -beta_e/log(exp(1),10)*log(mle_eta_e,10), b = beta_e/log(exp(1),10), lwd = 3, col = "blue")
#not fit as good as beta = 3

#e_c
#compute mle_eta_e's se
se_eta_e <- (mle_eta_e/beta_e)*sqrt(1/7)

#compute 95% CI
print(c(mle_eta_e-qnorm(0.975)*se_eta_e, mle_eta_e+qnorm(0.975)*se_eta_e))
#larger interval

#observed that mle is impacted by different value of beta. althrough the atual beta = 2, result showed that data fitted better with beta = 3 that we could find evidence from interval of CI wihch has smaller interval when beta = 3. 

#3
covariance_matrix <- matrix(c(c(.058, .037), c(.037, .040)), nrow = 2, ncol = 2)
u_hat <- 6.56
sigma_hat <- 0.534

#a
mean_estimate <- exp(u_hat+1/2*sigma_hat^2)
#define function g = exp(u+1/2*sigma^2)
diff_u_g <- exp(u_hat+1/2*sigma_hat^2)
diff_sigma_g <- exp(u_hat+1/2*sigma_hat^2)*sigma_hat
diff_sigma_u_g <- exp(u_hat+1/2*sigma_hat^2)*sigma_hat

#compute variacne of function g
var_g <- diff_u_g^2*covariance_matrix[1, 1]+diff_sigma_g^2*covariance_matrix[2, 2]+2*diff_sigma_u_g*covariance_matrix[1, 2]

#compute CI
print(c(mean_estimate-qnorm(0.975)*sqrt(var_g), mean_estimate+qnorm(0.975)*sqrt(var_g)))

#b, slide 32
log_tp_10_hat <- u_hat+sigma_hat*qnorm(0.1)
se_log_tp <- sqrt(covariance_matrix[1, 1] + qnorm(.1)^2*covariance_matrix[2, 2] + 2*qnorm(.1)*covariance_matrix[1, 2])
print(c(exp(log_tp_10_hat-qnorm(.975)*se_log_tp), exp(log_tp_10_hat+qnorm(.975)*se_log_tp)))

#c
F_500 <- 10/15
#using pointwise binomial-based conservative confidence interval
F_low <- qbeta(.025, 10, 15-10+1)
F_up <- qbeta(.975, 10+1, 15-10)
print(c(F_low, F_up))

#d
F_500 <- 10/15
#compute F(500)'s CI baesd on logit trasformation
se_F <- sqrt(1/15*F_500*(1-F_500))
w <- exp(qnorm(0.975)*se_F/(F_500*(1-F_500)))
F_low <- F_500/(F_500+(1-F_500)*w)
F_up <- F_500/(F_500+(1-F_500)/w)
print(c(F_low, F_up))
