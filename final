#1
percent1 <- c(.47, .93, 2.11, 2.72, 3.51, 4.34, 4.91, 5.48, 5.99, 6.72, 7.13, 8.00, 8.92, 9.49, 9.87, 10.94)
percent2 <- c(.71, 1.22, 1.90, 2.3, 2.87, 3.75, 4.42, 4.99, 5.51, 6.07, 6.64, 7.16, 7.78, 8.42, 8.91, 9.28)
percent3 <- c(.71, 1.17, 1.73, 1.99, 2.53, 2.97, 3.3, 3.94, 4.16, 4.45, 4.89, 5.27, 5.69, 6.02, 6.45, 6.88)
percent4 <- c(.36, .62, 1.36, 1.95, 2.3, 2.95, 3.39, 3.79, 4.11, 4.5, 4.72, 4.98, 5.28, 5.61, 5.95, 6.14)
percent5 <- c(.27, .61, 1.11, 1.77, 2.06, 2.58, 2.99, 3.38, 4.05, 4.63, 5.24, 5.62, 6.04, 6.32, 7.1, 7.59)
percent6 <- c(.36, 1.39, 1.95, 2.86, 3.46, 3.81, 4.53, 5.35, 5.92, 6.71, 7.7, 8.61, 9.15, 9.95, 10.49, 11.01)
percent7 <- c(.36, .92, 1.21, 1.46, 1.93, 2.39, 2.68, 2.94, 3.42, 4.09, 4.58, 4.84, 5.11, 5.57, 6.11, 7.17)
percent8 <- c(.46, 1.07, 1.42, 1.77, 2.11, 2.4, 2.78, 3.02, 3.29, 3.75, 4.16, 4.76, 5.16, 5.46, 5.81, 6.24)
percent9 <- c(.51, .93, 1.57, 1.96, 2.59, 3.29, 3.61, 4.11, 4.6, 4.91, 5.34, 5.84, 6.4, 6.84, 7.2, 7.88)
percent10 <- c(.41, 1.49, 2.38, 3, 3.84, 4.5, 5.25, 6.26, 7.05, 7.8, 8.32, 8.93, 9.55, 10.45, 11.28, 12.21)
percent11 <- c(.44, 1, 1.57, 1.96, 2.59, 3.29, 3.61, 4.11, 4.6, 4.91, 5.34, 5.84, 6.4, 6.84, 7.2, 7.88)
percent12 <- c(.39, .80, 1.35, 1.74, 2.98, 3.59, 4.03, 4.44, 4.79, 5.22, 5.48, 5.96, 6.23, 6.99, 7.37, 7.88)
percent13 <- c(.3, .74, 1.52, 1.85, 2.39, 2.95, 3.51, 3.92, 5.03, 5.47, 5.84, 6.5, 6.94, 7.39, 7.85, 8.09)
percent14 <- c(.44, .7, 1.05, 1.35, 1.8, 2.55, 2.83, 3.39, 3.72, 4.09, 4.83, 5.41, 5.76, 6.14, 6.51, 6.88)
percent15 <- c(.51, .83, 1.29, 1.52, 1.91, 2.27, 2.78, 3.42, 3.78, 4.11, 4.38, 4.63, 5.38, 5.84, 6.16, 6.62)

time <- c(250, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3250, 3500, 3750, 4000)

data_1 <- data.frame(time, percent1, percent2, percent3, percent4, percent5, percent6, percent7, percent8, percent9, percent10, percent11, percent12, percent13, percent14, percent15)

x <- symbol("x")
a <- symbol("a")

#caracas
#caracas::install_sympy()
# Define the function
f <- x^a

# Perform the symbolic integration
integral_result <- integrate(f, x)
integral_result

#2

t <- c(.1, .33, .5, .5, .9, 1, 1.55, 1.65, 2.1, 4, 15, 16, 36, 50, 55, 95, 122, 129, 625, 700, 49, 99, 154.5, 180, 291, 447, 510, 600, 1656, 1721, 188, 297, 405, 744, 1218, 1340, 1715, 3382, 606, 1012, 2520, 2610, 3988, 4100, 5025, 6842)
d <- rep(1, 46)
v <- c(rep(361.4, 10), rep(219, 10), rep(157.1, 10), rep(122.4, 8), rep(100.3, 8))

data_2 <- data.frame(t, d, v)
#2-1
#scatter plot with no transformation
plot(v, t,
     main = "scatter plot no transformation",
     xlab = "kV/mm", ylab = "time"
)
plot(log(v), log(t),
     main = "scatter plot with log-log transformation",
     xlab = "log kV/mm", ylab = "log time"
)

#lognormal distribution based

#2-2

#EqualSig statistical model

voltage <- c(361.4, 219.0, 157.1, 122.4, 100.3)
#calculate sig_mle
sig_mle = 0

for(i in voltage){
  len = dim(data_2[data_2$v == i,])[1]
  miu_mle_ <- sum(log(data_2[data_2$v == i,]$t))/len
  sig_mle = sig_mle + sum((log(data_2[data_2$v == i,]$t)-miu_mle_)^2)
}
sig_mle = sqrt(sig_mle/length(t))

#information matrix, covariance matrix and CI

equalsig_data <- rep(0, 6)

j = 1

equalsig_data[6] = sig_mle

for(i in voltage){
  len = dim(data_2[data_2$v == i,])[1]
  miu_mle_ <- sum(log(data_2[data_2$v == i,]$t))/len
  
  information_matrix <- matrix(c(c(len/(sig_mle^2), 0), c(0, 2*len/(sig_mle^2))), nrow = 2)
  covariance_matrix <- solve(information_matrix)
  
  cat(i, "voltage's miu_mle is:", miu_mle_, "\n")
  cat("miu_mle's 95% CI is:", miu_mle_ + qnorm(0.025)*sqrt(covariance_matrix[1, 1]), miu_mle_ - qnorm(0.025)*sqrt(covariance_matrix[1, 1]), "\n\n")
  equalsig_data[j] = miu_mle_
  j = j+1
}

cat("sig_mle is:", sig_mle, "\n")
cat("sig_mle's 95% CI is:", sig_mle + qnorm(0.025)*sqrt(covariance_matrix[2, 2]), sig_mle - qnorm(0.025)*sqrt(covariance_matrix[2, 2]), "\n\n")


#SepDists statistical model
#mle, information matrix and covariance matrix
voltage <- c(361.4, 219.0, 157.1, 122.4, 100.3)
sepdist_data <- rep(0, 10)
j = 1
k = 6
for(i in voltage){
  cat("Doing", i, "Voltage\n\n")
  len = dim(data_2[data_2$v == i,])[1]
  miu_mle_ <- sum(log(data_2[data_2$v == i,]$t))/len
  sig_mle_ <- sqrt(sum((log(data_2[data_2$v == i,]$t)-miu_mle_)^2)/len)
  information_matrix_ <- matrix(c(c(len/sig_mle_^2, 0), c(0, 2*len/sig_mle_)), nrow = 2)
  covariance_matrix_ <- solve(information_matrix_)
  cat("miu_mle is:", miu_mle_, "\n")
  cat("miu_mle's 95% CI is:", miu_mle_ + qnorm(0.025)*sqrt(covariance_matrix_[1, 1]), miu_mle_ - qnorm(0.025)*sqrt(covariance_matrix_[1, 1]), "\n")
  cat("sig_mle is:", sig_mle_, "\n")
  cat("sig_mle's 95% CI is:", sig_mle_ + qnorm(0.025)*sqrt(covariance_matrix_[2, 2]), sig_mle_ - qnorm(0.025)*sqrt(covariance_matrix_[2, 2]), "\n\n")
  
  sepdist_data[j] = miu_mle_
  j = j + 1
  
  sepdist_data[k] = sig_mle_
  k = k + 1
  print(covariance_matrix_)
}

#Doing Hypothesis Test to compare SepDists, EqualSig model
critical_value = qchisq(.95, 4) #df = 10-6
#compute
h0_stat_compute <- function(data_2, parameter, voltage){
  len_para = length(parameter)
  len_all = length(data_2$t)
  likelihood_stat = 0
  for(i in 1:5){
    len = dim(data_2[data_2$v == voltage[i],])[1] #group length of data
    temp = -(1/(2*parameter[6]^2))*sum((log(data_2[data_2$v == voltage[i],]$t)-parameter[i])^2)
    likelihood_stat = likelihood_stat + temp
  }
  
  likelihood_stat = likelihood_stat + (-sum(log(data_2$t))-len_all*log(parameter[6])-.5*len_all*log(2*pi))
  
  return(likelihood_stat)
}
h0_stat <- h0_stat_compute(data_2, equalsig_data, voltage)

h1_stat_compute <- function(data_2, parameter, voltage){
  len_all = length(data_2$t)
  likelihood_stat = 0
  for(i in 1:5){
    len = dim(data_2[data_2$v == voltage[i],])[1] #group length of data
    temp1 = -(1/(2*parameter[i+5]^2))*sum((log(data_2[data_2$v == voltage[i],]$t)-parameter[i])^2)
    likelihood_stat = likelihood_stat + temp1
    temp2 = -len*log(parameter[i+5])
    likelihood_stat = likelihood_stat + temp2
  }
  likelihood_stat = likelihood_stat + (-sum(log(data_2$t))-.5*len_all*log(2*pi))
  
  return(likelihood_stat)
}
h1_stat <- h1_stat_compute(data_2, sepdist_data, voltage)

test_statistic <- -2*(h0_stat - h1_stat)

cat("critical value:", critical_value, "\n\n")
cat("test value:", test_statistic, "\n\n")  #h0 not reject, using equal sigma to do probability plot

#AIC
AIC_equalsig <- -2*h0_stat + 2*6
AIC_sepdist <- -2*h1_stat + 2*10

cat("EqualSig's AIC:", AIC_equalsig, "\n\n")
cat("SepDists' AIC:", AIC_sepdist, "\n\n")

#Multiple probability plot

fi_p <- (log(data_2[data_2$v == voltage[2],]$t)-equalsig_data[2])/equalsig_data[6]

pnorm(fi_p)

plot(log(data_2[data_2$v == voltage[2],]$t), fi_p)

#unequal sigma
len_point <- length(data_2[data_2$v == voltage[2],]$t)
time <- data_2[data_2$v == voltage[2],]$t
proportion_failing <- seq(1, len_point)/len_point
plot(log(time), qnorm(proportion_failing),
     axes = FALSE,
     xlim = c(log(min(data_2$t))-1, log(max(data_2$t))+1),
     main = "multiple probability plot with unequal sigma"
     )
fi_p <- (log(data_2[data_2$v == voltage[2],]$t)-sepdist_data[2])/sepdist_data[7]
abline(a = lsfit(log(data_2[data_2$v == voltage[2],]$t), fi_p)$coefficients[1], b = lsfit(log(data_2[data_2$v == voltage[2],]$t), fi_p)$coefficients[2])

for(i in 1:5){
  len_point <- length(data_2[data_2$v == voltage[i],]$t)
  time <- data_2[data_2$v == voltage[i],]$t
  fi_p <- (log(data_2[data_2$v == voltage[i],]$t)-sepdist_data[i])/sepdist_data[i+5]
  proportion_failing <- seq(1, len_point)/len_point
  abline(a = lsfit(log(data_2[data_2$v == voltage[i],]$t), fi_p)$coefficients[1], b = lsfit(log(data_2[data_2$v == voltage[i],]$t), fi_p)$coefficients[2])
  for(j in 1:len_point){
    points(log(time[j]), qnorm(proportion_failing[j]))
  }
  print(lsfit(log(data_2[data_2$v == voltage[i],]$t), fi_p)$coefficients)
  print(log(time))
}

proportion <- c(.0005, .001, .003, .005, .01, .02, .05, .1, .2, .3, .5, .7, .8, .9 ,.95, .98, .999)
proportion_axis <- qnorm(proportion)

volt <- c(.1, .5, 10, 50, 100, 500, 1000, 2000, 3000, 4000, 5000, 6000)
volt_axis <- log(volt)

axis(2, at = proportion_axis, labels = proportion, las = 1)
axis(1, at = volt_axis, labels = volt, las = 1)

box()

#equal sigma

len_point <- length(data_2[data_2$v == voltage[2],]$t)
time <- data_2[data_2$v == voltage[2],]$t
proportion_failing <- seq(1, len_point)/len_point
plot(log(time), qnorm(proportion_failing),
     axes = FALSE,
     xlim = c(log(min(data_2$t))-1, log(max(data_2$t))+1),
     main = "multiple probability plot with equal sigma"
)
fi_p <- (log(data_2[data_2$v == voltage[2],]$t)-equalsig_data[2])/equalsig_data[6]
abline(a = lsfit(log(data_2[data_2$v == voltage[2],]$t), fi_p)$coefficients[1], b = lsfit(log(data_2[data_2$v == voltage[2],]$t), fi_p)$coefficients[2])

for(i in 1:5){
  len_point <- length(data_2[data_2$v == voltage[i],]$t)
  time <- data_2[data_2$v == voltage[i],]$t
  fi_p <- (log(data_2[data_2$v == voltage[i],]$t)-equalsig_data[i])/equalsig_data[6]
  proportion_failing <- seq(1, len_point)/len_point
  abline(a = lsfit(log(data_2[data_2$v == voltage[i],]$t), fi_p)$coefficients[1], b = lsfit(log(data_2[data_2$v == voltage[i],]$t), fi_p)$coefficients[2])
  for(j in 1:len_point){
    points(log(time[j]), qnorm(proportion_failing[j]))
  }
  print(lsfit(log(data_2[data_2$v == voltage[i],]$t), fi_p)$coefficients)
  print(log(time))
}

proportion <- c(.0005, .001, .003, .005, .01, .02, .05, .1, .2, .3, .5, .7, .8, .9 ,.95, .98, .999)
proportion_axis <- qnorm(proportion)

volt <- c(.1, .5, 10, 50, 100, 500, 1000, 2000, 3000, 4000, 5000, 6000)
volt_axis <- log(volt)

axis(2, at = proportion_axis, labels = proportion, las = 1)
axis(1, at = volt_axis, labels = volt, las = 1)

box()
